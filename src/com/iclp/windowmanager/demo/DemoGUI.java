package com.iclp.windowmanager.demo;

import com.iclp.windowmanager.Desktop;
import com.iclp.windowmanager.DesktopCanvas;
import com.iclp.windowmanager.Manager;
import com.iclp.windowmanager.ManagerListener;
import com.iclp.windowmanager.Rectangle;
import com.iclp.windowmanager.Renderer;
import com.iclp.windowmanager.UpdateRequest;
import com.iclp.windowmanager.Window;
import com.sun.media.jfxmedia.logging.Logger;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;

public class DemoGUI extends javax.swing.JFrame implements ManagerListener
{
    private Manager manager;
    private Desktop desktop1;
    private Desktop desktop2;

    /**
     * Creates new form DemoGUI
     */
    public DemoGUI() 
    {
        this.manager = new Manager(4);
        
        class TestWindow extends Window
        {

            public TestWindow(Manager manager, Desktop desktop, String title,int width, int height) {
                super(manager, desktop, title, width, height);
            }

            @Override
            public void run()
            {
                int x = 0, y = getHeight() / 2;
                
                while(true)
                {
                    if(x < getWidth())
                    {
                        ++x;
                    }
                    else
                    {
                        x = 0;
                    }
                    
                    setRectangle(new Rectangle(x, 0, getWidth(), getHeight()));
                    
                    Graphics2D g2 = getBuffer().beginRender();
                    
                    g2.setColor(Color.WHITE);
                    g2.fillRect(0, 0, getWidth(), getHeight());
                    
                    g2.setColor(Color.RED);
                    g2.drawString("Hello World!", x, y);
                    
                    
                    getBuffer().endRender(g2);
                    
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }
        }

        desktop1 = new Desktop(this.manager, "Desktop1", Color.GREEN, 700, 500);
        desktop2 = new Desktop(this.manager, "Desktop2", Color.ORANGE, 700, 500);
        
        Window window1 = new BouncingTextWindow(this.manager, desktop1, "Window 1", 300, 200, "Hello World!");
        window1.start();
        Window window2 = new MovinTestWindow(this.manager, desktop2, "Window 2", 300, 200);
        window2.start();
        Window window3 = new TestWindow(this.manager, desktop2, "Window 3", 300, 200);
        window3.setRectangle(new Rectangle(50, 50, 300, 200));
        window3.start();
        Window window4 = new DesktopMovingWindow(manager, desktop1, "Window 4", 300, 200);
        window4.setRectangle(new Rectangle(200, 200, 350, 200));
        window4.start();
        
        Window window5 = new PictureWindow(manager, desktop1, "Window 5", 300, 200, "res/chrome.png");
        window5.setRectangle(new Rectangle(0, 300, 300, 200));
        window5.run();
        Window window6 = new PictureWindow(manager, desktop2, "Window 6", 300, 200, "res/word.png");
        window6.setRectangle(new Rectangle(0, 300, 300, 200));
        window6.run();
        
        initComponents();
        
        lblFirstDesktop.setText(desktop1.getName());
        lblSecondDesktop.setText(desktop2.getName());
        
        updateLists();
        
        canvasPanel.setLayout(new GridLayout(1, 0));
        Renderer renderer = new Renderer(manager, 30);
        ArrayList<DesktopCanvas> canvases = renderer.getCanvases();
        if(canvases.get(0).getDesktop() == desktop1)
        {
            canvasPanel.add(canvases.get(0));
            canvasPanel.add(canvases.get(1));
        }
        else
        {
            canvasPanel.add(canvases.get(1));
            canvasPanel.add(canvases.get(0));
        }
        
        /*for(DesktopCanvas desktopCanvas : renderer.getCanvases())
        {
            canvasPanel.add(desktopCanvas);
        }*/
        
        renderer.start();
        manager.addListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvasPanel = new javax.swing.JPanel();
        lblFirstDesktop = new javax.swing.JLabel();
        lblSecondDesktop = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listFirstWindows = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSecondWindows = new javax.swing.JList<>();
        btnSwap = new javax.swing.JButton();
        btnOpenDebugWindow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1400, 699));

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1500, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 234, Short.MAX_VALUE)
        );

        lblFirstDesktop.setText("jLabel1");

        lblSecondDesktop.setText("jLabel1");

        listFirstWindows.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listFirstWindowsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listFirstWindows);

        listSecondWindows.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSecondWindowsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listSecondWindows);

        btnSwap.setText("Swap windows");
        btnSwap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwapActionPerformed(evt);
            }
        });

        btnOpenDebugWindow.setText("Open Debug Window");
        btnOpenDebugWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenDebugWindowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvasPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(233, 233, 233)
                .addComponent(lblFirstDesktop)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSecondDesktop)
                .addGap(321, 321, 321))
            .addGroup(layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(295, 295, 295)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSwap)
                    .addComponent(btnOpenDebugWindow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(245, 245, 245))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvasPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstDesktop)
                    .addComponent(lblSecondDesktop))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(btnSwap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpenDebugWindow)))
                .addContainerGap(329, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listFirstWindowsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listFirstWindowsValueChanged
        if(listFirstWindows.getSelectedIndex() != -1)
        {
            manager.getLogger().log(Logger.DEBUG, listFirstWindows.getSelectedValue().toString());
            
            manager.focusWindow(manager.getWindowByTitle(listFirstWindows.getSelectedValue()));
        }
    }//GEN-LAST:event_listFirstWindowsValueChanged

    private void listSecondWindowsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSecondWindowsValueChanged
        if(listSecondWindows.getSelectedIndex() != -1)
        {
            manager.getLogger().log(Logger.DEBUG, listSecondWindows.getSelectedValue());
            
            manager.focusWindow(manager.getWindowByTitle(listSecondWindows.getSelectedValue()));
        }
    }//GEN-LAST:event_listSecondWindowsValueChanged

    private void btnSwapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwapActionPerformed
        int firstWindowIndex = listFirstWindows.getSelectedIndex();
        int secondWindowIndex = listSecondWindows.getSelectedIndex();
        if(firstWindowIndex == -1 || secondWindowIndex == -1)
        {
            manager.getLogger().log(Logger.DEBUG, "Please select windows on both sides");
            return;
        }
        
        Window firstWindow = manager.getWindowByTitle(listFirstWindows.getSelectedValue());
        Window secondWindow = manager.getWindowByTitle(listSecondWindows.getSelectedValue());
        manager.swapDesktops(firstWindow, secondWindow);
        
        manager.getLogger().log(Logger.DEBUG, "Swaped window \"" + firstWindow.getTitle() + "\" with \"" + secondWindow.getTitle() + "\"");
    }//GEN-LAST:event_btnSwapActionPerformed

    private void btnOpenDebugWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenDebugWindowActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DebugFrame(manager).setVisible(true);
            }
        });
    }//GEN-LAST:event_btnOpenDebugWindowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DemoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DemoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenDebugWindow;
    private javax.swing.JButton btnSwap;
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFirstDesktop;
    private javax.swing.JLabel lblSecondDesktop;
    private javax.swing.JList<String> listFirstWindows;
    private javax.swing.JList<String> listSecondWindows;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onWindowAdded(Window window) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window added: " + window.getTitle());
        updateLists();
    }

    @Override
    public void onWindowRemoved(Window window) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window removed: " + window.getTitle());
        updateLists();
    }

    @Override
    public void onWindowFocused(Desktop desktop, Window window) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window \"" + window.getTitle()+ "\" focused on desktop: " + desktop.getName());
        
        JList<String> list = desktop == desktop1 ? listFirstWindows : listSecondWindows;
        int windowIndex = getWindowIndex(list, window);
        list.setSelectedIndex(windowIndex);
    }
    
    private int getWindowIndex(JList<String> list, Window window)
    {
        for(int i = 0; i < list.getModel().getSize(); ++i)
        {
            if(list.getModel().getElementAt(i) == window.getTitle())
            {
                return i;
            }
        }
        return -1;
    }

    @Override
    public void onWindowUnfocused(Desktop desktop) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window unfocused on desktop: " + desktop.getName());
        
        JList<String> list = desktop == desktop1 ? listFirstWindows : listSecondWindows;
        list.clearSelection();
    }

    @Override
    public void onDesktopAdded(Desktop desktop) 
    {
        manager.getLogger().log(Logger.DEBUG, "Desktop added: " + desktop.getName());
    }

    @Override
    public void onDesktopNameChanged(Desktop desktop, String newName, String oldName) 
    {
        manager.getLogger().log(Logger.DEBUG, "Desktop \"" + desktop.getName()+ "\" changed name from " + oldName + " to " + newName);
    }

    @Override
    public void onWindowTitleChanged(Window window, String newTitle, String oldTitle) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window \"" + window.getTitle() + "\" changed titles from " + oldTitle + " to " + newTitle);
        
        updateLists();
    }

    @Override
    public void onWindowRectangleChanged(Window window, Rectangle newRect, Rectangle oldRect) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window \"" + window.getTitle() + "\" changed rectangle from " + oldRect + " to " + newRect);
    }

    @Override
    public void onWindowDesktopChanged(Window window, Desktop newDesktop, Desktop oldDesktop) 
    {
        manager.getLogger().log(Logger.DEBUG, "Window \"" + window.getTitle() + "\" changed desktop from " + oldDesktop.getName() + " to " + newDesktop.getName());
        updateLists();
    }

    @Override
    public void onUpdateRequestAdded(UpdateRequest request) 
    {
        manager.getLogger().log(Logger.DEBUG, "Update request added(window = \"" + request.getWindow().getTitle() + "\"): " + request.toString());
    }

    @Override
    public void onUpdateRequestExecuted(UpdateRequest request) 
    {
        manager.getLogger().log(Logger.DEBUG, "Update request executed(window = \"" + request.getWindow().getTitle() + "\"): " + request.toString());
    }

    @Override
    public void onUpdatesPaused() 
    {
        //manager.getLogger().log(Logger.DEBUG, "Updates resumed for: all");
    }

    @Override
    public void onUpdatesPaused(Desktop desktop) 
    {
        //manager.getLogger().log(Logger.DEBUG, "Updates paused for desktop: " + desktop.getName());
    }

    @Override
    public void onUpdatesPaused(Window window) 
    {
        manager.getLogger().log(Logger.DEBUG, "Updates paused for window: " + window.getTitle());
    }

    @Override
    public void onUpdatesResumed() 
    {
        //manager.getLogger().log(Logger.DEBUG, "Updates resumed for: all");
    }

    @Override
    public void onUpdatesResumed(Desktop desktop) 
    {
        //manager.getLogger().log(Logger.DEBUG, "Updates resumed for desktop: " + desktop.getName());
    }

    @Override
    public void onUpdatesResumed(Window window) 
    {
        manager.getLogger().log(Logger.DEBUG, "Updates resumed for window: " + window.getTitle());
    }

    @Override
    public void onWindowsSwapped(Window first, Window second) 
    {
        updateLists();
    }
    
    public void updateLists()
    {
        DefaultListModel<String> model = new DefaultListModel<>();
        listFirstWindows.setModel(model);
        for(Window window : manager.getWindows(desktop1))
        {
            model.addElement(window.getTitle());
        }
        
        model = new DefaultListModel<>();
        listSecondWindows.setModel(model);
        for(Window window : manager.getWindows(desktop2))
        {
            model.addElement(window.getTitle());
        }
    }
}
